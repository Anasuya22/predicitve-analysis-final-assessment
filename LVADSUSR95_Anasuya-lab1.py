# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/155B3NfWAEe3mEXHfaBHTJtD1je6qz229
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

warnings.filterwarnings('ignore')

data = pd.read_csv("/content/loan_approval.csv")

# Fill missing values with the mean

# Check for missing values
print(data.isnull().sum())

# No missing data
data.dropna(inplace=True)

# Outlier Handling (you can choose a specific feature for outlier detection)
Q1 = data[' income_annum'].quantile(0.25)
Q3 = data[' income_annum'].quantile(0.75)
IQR = Q3 - Q1
data = data[~((data[' income_annum'] < (Q1 - 1.5 * IQR)) | (data[' income_annum'] > (Q3 + 1.5 * IQR)))]

# EDA
print(data.describe())
print(data.info())

data.columns = data.columns.str.strip()

data.columns

# Drop duplicate rows
data = data.fillna(data.mean())

data = data.drop_duplicates()

X = data.drop(columns=['loan_status'])
y = data['loan_status']  # Target variable

# Perform one-hot encoding for categorical variables (if applicable)
X = pd.get_dummies(X)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Logistic Regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)