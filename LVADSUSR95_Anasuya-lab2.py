# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L8EAgvmAplTrB3vOrYKZl5tPuiDLf7Z7
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("/content/auto-mpg.csv")

# Replace '?' with NaN
data.replace('?', pd.NA, inplace=True)

data1 = data.columns.drop('car name')
data[data1] = data[data1].apply(pd.to_numeric, errors='coerce')

# Fill missing values with the mean
data.fillna(data.mean(), inplace=True)

# Select features and target variable
X = data[['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model year']]  # Features
y = data['mpg']  # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Decision Tree Regressor model
model = DecisionTreeRegressor(random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error (MSE):", mse)

# Visualize the predicted values vs. actual values
plt.scatter(y_test, predictions)
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Actual vs. Predicted values")
plt.show()